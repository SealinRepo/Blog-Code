<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sealin</title>
  
  <subtitle>俗人昭昭, 我独昏昏. 俗人察察, 我独闷闷.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.sealin.net/"/>
  <updated>2019-07-02T15:29:49.045Z</updated>
  <id>http://www.sealin.net/</id>
  
  <author>
    <name>Sealin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java Native Interface(JNI)小记</title>
    <link href="http://www.sealin.net/2019/07/02/Java-Native/"/>
    <id>http://www.sealin.net/2019/07/02/Java-Native/</id>
    <published>2019-07-02T15:29:49.000Z</published>
    <updated>2019-07-02T15:29:49.045Z</updated>
    
    <content type="html"><![CDATA[<pre><code>看JAVA源码的时候发现很多类使用到native关键字,查了下发现跟C#的import作用差不多,就是用来调用动态链接库dll文件方法的关键字。</code></pre><p>自己试试才更好理解，以下是我折腾这个的过程：</p><p>一：</p><pre><code>先用JAVA写好一个调用类（就当这个DLL已经存在了）。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">packageorg.uroot.jni;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line">* Created by Sealin on 2017-12-06.</span><br><span class="line"></span><br><span class="line">* http://java.uroot.org/</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">public classHelloJNI &#123;</span><br><span class="line"></span><br><span class="line">    public native voidsay();</span><br><span class="line"></span><br><span class="line">    static&#123;</span><br><span class="line"></span><br><span class="line">       //这里引用名要和生成的DLL文件名一致，引用的时候不写.dll</span><br><span class="line"></span><br><span class="line">        System.loadLibrary(&quot;org_uroot_jni_HelloJNImpl&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static voidmain(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        HelloJNI jni =newHelloJNI();</span><br><span class="line"></span><br><span class="line">        jni.say();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二：编译这个类，生成.class文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">javac org.uroot.jni.HelloJNI</span><br></pre></td></tr></table></figure><p>三：使用javah生成这个class文件的*.h文件（C语言的头文件），我生成的文件名是【org_uroot_jni_HelloJNI.h】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">javah -jni HelloJNI</span><br></pre></td></tr></table></figure><p>如果一切正常，那*.h文件已经生成在当前目录了。这个文件一般不要去修改它，因为它生成了对应class文件的结构和调用方法的引用等信息，和JAVA文件中的say方法结构，结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">JAVA_完整包路径_类名_方法名</span><br><span class="line"></span><br><span class="line">//比如我这个示例生成的.h抽象方法名是：</span><br><span class="line"></span><br><span class="line">Java_org_uroot_jni_HelloJNI_say (JNIEnv *, jobject);</span><br></pre></td></tr></table></figure><p>四：新建一个c或者cpp文件，这里叫【org_uroot_jni_HelloJNImpl.cpp】，引入生成的头文件，并实现上述头文件的方法部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include &quot;org_uroot_jni_HelloJNI.h&quot;</span><br><span class="line"></span><br><span class="line">#include</span><br><span class="line"></span><br><span class="line">#include &quot;jni.h&quot;</span><br><span class="line"></span><br><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line">*Class:    org_uroot_jni_HelloJNI</span><br><span class="line"></span><br><span class="line">* Method:    say</span><br><span class="line"></span><br><span class="line">* Signature: ()V</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">JNIEXPORT void JNICALL Java_org_uroot_jni_HelloJNI_say</span><br><span class="line"></span><br><span class="line">(JNIEnv *, jobject) &#123;</span><br><span class="line"></span><br><span class="line">    printf(&quot;Hello, I&apos;m Java Native Interface\n&quot;);</span><br><span class="line"></span><br><span class="line">    return;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main() &#123;</span><br><span class="line"></span><br><span class="line">    Java_org_uroot_jni_HelloJNI_say(nullptr, NULL);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>五：把【%JAVA_HOME%\include\jni.h】和【%JAVA_HOME%\include\win32\jni_md.h】放到当前文件夹，编译【org_uroot_jni_HelloJNImpl.cpp】，我这里因为装了VS，所以直接用cl工具进行DLL编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cl /LD org_uroot_jni_HelloJNImpl.cpp</span><br></pre></td></tr></table></figure><p>我在这里弄了好久，因为一直提示找不到jni.h,打开javah生成的头文件看了下，发现生成的引入方式是#include ，因为在path环境变量里边没有加入include和include/win32，所以导致了这个问题，将我们生成的头文件和新建的实现文件此处引用都改为【 #include “jni.h”】，编译通过。</p><p>六：确认<em>.class和刚刚生成的</em>.dll都在同一个目录中后，就可以运行试试效果了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">java org.uroot.jni.HelloJNI</span><br></pre></td></tr></table></figure><p>这里加入包名后可能会出现无法找到DLL的情况，确认引用名和DLL文件名一样后还是说找不到，但是写java文件的时候不使用包就不存在这个问题，到网上查了下，程序在执行的时候会在PATH环境变量中去查找引用DLL，所以加入了个文件夹到系统PATH，然后把刚刚生成的DLL文件放到里边，再执行就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">_&gt;java org.uroot.jni.HelloJNI</span><br><span class="line"></span><br><span class="line">_&gt;Hello, I&apos;m Java Native Interface</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;看JAVA源码的时候发现很多类使用到native关键字,查了下发现跟C#的import作用差不多,就是用来调用动态链接库dll文件方法的关键字。&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;自己试试才更好理解，以下是我折腾这个的过程：&lt;/p&gt;
&lt;p&gt;一：&lt;/p&gt;
&lt;pre
      
    
    </summary>
    
      <category term="技术" scheme="http://www.sealin.net/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="JAVA" scheme="http://www.sealin.net/categories/%E6%8A%80%E6%9C%AF/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.sealin.net/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC整合Springfox-Swagger</title>
    <link href="http://www.sealin.net/2019/07/02/Spring-Swagger/"/>
    <id>http://www.sealin.net/2019/07/02/Spring-Swagger/</id>
    <published>2019-07-02T15:26:12.000Z</published>
    <updated>2019-07-02T15:26:12.862Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关于Swagger的简介就不占篇幅了...</span><br><span class="line">本文使用的Springfox-Swagger版本为2.8.0</span><br></pre></td></tr></table></figure><hr><p>要整合Springfox-Swagger,只需要在Maven导入两个包即可,没有Maven下载导入也行…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.8.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.8.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>选择版本时,最好保持两个包的版本一致,以免出现不可预知的问题~<br>以上两个是使用Swagger的基本包,如果需要接口自动完成对象和JSON串的转换的话,需要再导入Jackson支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.6.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.6.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.6.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>导入包以后,创建一个简单的Swagger配置类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package net.sealin.config;</span><br><span class="line"></span><br><span class="line">import io.swagger.annotations.ApiOperation;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.ComponentScan;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line">import springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line">import springfox.documentation.builders.PathSelectors;</span><br><span class="line">import springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line">import springfox.documentation.service.ApiInfo;</span><br><span class="line">import springfox.documentation.service.Contact;</span><br><span class="line">import springfox.documentation.spi.DocumentationType;</span><br><span class="line">import springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line">import springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line">// 仅在没有Spring-boot的项目中需要开启此配置</span><br><span class="line">@EnableWebMvc</span><br><span class="line">// 启用Swagger2</span><br><span class="line">@EnableSwagger2</span><br><span class="line">// 让Spring来加载该类配置</span><br><span class="line">@Configuration</span><br><span class="line">/**</span><br><span class="line"> * 也可在Spring配置文件中配置 </span><br><span class="line"> * &lt;context:component-scan base-package=&quot;net.sealin.controller&quot;/&gt;</span><br><span class="line"> */</span><br><span class="line">@ComponentScan(basePackages = &quot;net.sealin.controller&quot;)</span><br><span class="line">/**</span><br><span class="line"> * @author Sealin</span><br><span class="line"> * Created by Sealin on 2018-03-28.</span><br><span class="line"> */</span><br><span class="line">public class SwaggerConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public Docket buildDocket() &#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(buildApiInf())</span><br><span class="line">                .select()</span><br><span class="line">                //controller匹配规则</span><br><span class="line">                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ApiInfo buildApiInf() &#123;</span><br><span class="line">        return new ApiInfoBuilder()</span><br><span class="line">                .title(&quot;开放接口API&quot;)</span><br><span class="line">                .termsOfServiceUrl(&quot;http://localhost:8099/v2/api-docs&quot;)</span><br><span class="line">                .description(&quot;项目名称等描述性词语&quot;)</span><br><span class="line">                .contact(new Contact(&quot;Sealin&quot;, &quot;http://www.sealin.net/&quot;, &quot;admin@sealin.net&quot;))</span><br><span class="line">                .version(&quot;1.0&quot;)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要让此配置类生效,需要Spring上下文配置中存在如下选项:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 让Swagger可以访问Controller --&gt;</span><br><span class="line">&lt;mvc:annotation-driven /&gt;</span><br><span class="line">&lt;!-- 开启注解管理 --&gt;</span><br><span class="line">&lt;context:annotation-config /&gt;</span><br><span class="line">&lt;!-- 将我们建立的配置类加入Spring容器 --&gt;</span><br><span class="line">&lt;bean class=&quot;net.sealin.config.SwaggerConfig&quot; /&gt;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 官方说明 --&gt;</span><br><span class="line">&lt;!-- Required so springfox can access spring&apos;s RequestMappingHandlerMapping  --&gt;</span><br><span class="line">&lt;mvc:annotation-driven/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Required to enable Spring post processing on @Configuration classes. --&gt;</span><br><span class="line">&lt;context:annotation-config/&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean class=&quot;com.yourapp.configuration.MySwaggerConfig&quot;/&gt;</span><br></pre></td></tr></table></figure><p>此外,因为我们用Spring实现的Servlet取代了默认的,在处理Swagger-UI的静态资源时,Spring-Servlet并不会帮我们映射这些资源文件,会导致不能访问swagger-ui.html的情况,两种方式可以解决这个问题,任选一种即可:<br>一.将没有@Controller解析的请求交给默认Servlet处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:default-servlet-handler /&gt;</span><br></pre></td></tr></table></figure><p>二.给Spring-servlet指定我们需要映射的资源文件路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:resources mapping=&quot;swagger-ui.html&quot; location=&quot;classpath:/META-INF/resources/&quot;/&gt;</span><br><span class="line">&lt;mvc:resources mapping=&quot;/webjars/**&quot; location=&quot;classpath:/META-INF/resources/webjars/&quot;/&gt;</span><br></pre></td></tr></table></figure><p>至此,Spring和Swagger的整合过程就告一段落了,运行试试:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">API文档视图及操作界面:</span><br><span class="line">http://127.0.0.1:8080/swagger/swagger-ui.html</span><br><span class="line">所有API的汇总信息(JSON)</span><br><span class="line">http://127.0.0.1:8080/swagger/v2/api-docs</span><br></pre></td></tr></table></figure><p>遇到其他问题可以留言噢,祝君好运~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
      
    
    </summary>
    
      <category term="技术" scheme="http://www.sealin.net/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="JAVA" scheme="http://www.sealin.net/categories/%E6%8A%80%E6%9C%AF/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://www.sealin.net/tags/JAVA/"/>
    
      <category term="Spring" scheme="http://www.sealin.net/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Idea+JRebel全自动热部署</title>
    <link href="http://www.sealin.net/2019/07/02/IDEA-JRebel/"/>
    <id>http://www.sealin.net/2019/07/02/IDEA-JRebel/</id>
    <published>2019-07-02T15:24:19.000Z</published>
    <updated>2019-07-02T15:24:19.170Z</updated>
    
    <content type="html"><![CDATA[<p>注意:Idea插件库的版本已经和谐服务器注册的方式了,没办法激活的,所以到这下载吧.<br>链接：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMWVUNDE4THM=" title="https://pan.baidu.com/s/1eT418Ls">https://pan.baidu.com/s/1eT418Ls<i class="fa fa-external-link"></i></span> 密码：2q1w<br>Idea离线安装插件就不占篇幅了,大概如下:<br>下载完以后是个ZIP压缩包,打开IDEA,关闭所有项目,Settings – plugins – install from disk,选择刚刚下载的ZIP就行了.<br>装完以后打开IDEA,Help-JRebel-Activation<br><img src="https://upload-images.jianshu.io/upload_images/8936944-b94e13ae6aae4e45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Active0.png.png"><br>注册服务器: <span class="exturl" data-url="aHR0cDovL2xpYy5zZWFsaW4ubmV0L3t1c2VybmFtZX0=" title="http://lic.sealin.net/{username}">http://lic.sealin.net/{username}<i class="fa fa-external-link"></i></span><br>这里username和email随意填就行<br><img src="https://upload-images.jianshu.io/upload_images/8936944-da83325205c70e4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Active.png"></p><p>使用及自动部署:<br>依次打开View - Tool Windows - JRebel<br><img src="https://upload-images.jianshu.io/upload_images/8936944-1a26a98d2447d564.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Usage0.png"><br>就能看到如下窗口了:<br><img src="https://upload-images.jianshu.io/upload_images/8936944-f56d3031326c3786.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Usage1.png.png"><br>在需要纳入JRebel管理的项目后边勾选,运行项目记得使用多出的两个按钮运行,分别是运行和调试.<br><img src="https://upload-images.jianshu.io/upload_images/8936944-1cc49dd7e745783a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Debug.png"></p><p>这时候已经实现热部署了,不过需要每次修改源码后手动执行UPDATE操作,我们可以结合Idea自身的Debug Hot swap功能,在”运行和调试配置”中,配置自动执行UPDATE操作.<br><img src="https://upload-images.jianshu.io/upload_images/8936944-9cdcb205e8728ee9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DebugConf.png"><br>这样我们改完源码后,切换到浏览器的时候后台就会自动帮我们部署项目了,再也不用手动点一下左边的UPDATE按钮,这里如果没有[Update classes and resource]选项的话,说明你部署的artifact包,在Deployment选项将WEB包更改为exploded就可以了.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;注意:Idea插件库的版本已经和谐服务器注册的方式了,没办法激活的,所以到这下载吧.&lt;br&gt;链接：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMWVUNDE4THM=&quot; title=&quot;http
      
    
    </summary>
    
      <category term="技术" scheme="http://www.sealin.net/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工具" scheme="http://www.sealin.net/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="IDEA" scheme="http://www.sealin.net/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>MySQL搭建主从同步数据库(一主多从)</title>
    <link href="http://www.sealin.net/2019/07/02/mysql-cluster/"/>
    <id>http://www.sealin.net/2019/07/02/mysql-cluster/</id>
    <published>2019-07-02T15:15:20.000Z</published>
    <updated>2019-07-02T15:15:20.463Z</updated>
    
    <content type="html"><![CDATA[<p>例如,我们此时有3台服务器,分别为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.100 --- Master</span><br><span class="line">192.168.1.101 --- Slave</span><br><span class="line">192.168.1.102 --- Slave</span><br></pre></td></tr></table></figure><p>1.<strong>Mysql默认是不允许远程连接的,首先打开每个服务器的远程访问权限,每个Mysql数据库都需要打开此项</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--打开远程访问用户</span><br><span class="line">grant all on *.* to &apos;user&apos;@&apos;192.168.1.%&apos; identified by &apos;password&apos; with grant option;</span><br><span class="line">--刷新权限配置</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>2.修改Master(主库)配置文件,默认安装的配置文件一般在:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/my.cnf</span><br></pre></td></tr></table></figure><p>在[mysqld]节点加上如下配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server-id=1</span><br><span class="line">log-bin=master-bin</span><br><span class="line">log-bin-index=master-bin.index</span><br><span class="line">#只同步test数据库(可选配置)</span><br><span class="line">binlog-do-db=test</span><br></pre></td></tr></table></figure><p>3.重启Mysql服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mariadb</span><br></pre></td></tr></table></figure><p>4.查看并记录master的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/8936944-34a339adea4011dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MysqlMaster.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#File</span><br><span class="line">master-bin.000001</span><br><span class="line">#################</span><br><span class="line">#Position:</span><br><span class="line">2077</span><br></pre></td></tr></table></figure><p>这时Master库已经配置完成了,接下来配置Slaver库:<br>1.同样的,先配置/etc/my.cnf,与Master不同的只有server-id一项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server-id=10</span><br><span class="line">log-bin=master-bin</span><br><span class="line">log-bin-index=master-bin.index</span><br></pre></td></tr></table></figure><p>2.重启数据库服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mariadb</span><br></pre></td></tr></table></figure><p>3.连接Mysql配置Master信息并开启Slave</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--设置Master信息</span><br><span class="line">change master to </span><br><span class="line"> master_host=&apos;192.168.1.100&apos;</span><br><span class="line">,master_user=&apos;user&apos;</span><br><span class="line">,master_password=&apos;password&apos;</span><br><span class="line">,master_log_file=&apos;master-bin.000001&apos;</span><br><span class="line">,master_log_pos=2077;</span><br><span class="line"></span><br><span class="line">--开启slave</span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure><p>4.查看slave状态:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status \G;</span><br></pre></td></tr></table></figure><p>结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show slave status \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.1.100</span><br><span class="line">                  Master_User: user</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: master-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 2077</span><br><span class="line">               Relay_Log_File: mariadb-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 623</span><br><span class="line">        Relay_Master_Log_File: master-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 2077</span><br><span class="line">              Relay_Log_Space: 919</span><br><span class="line">              Until_Condition: None</span><br><span class="line">                        ..........</span><br></pre></td></tr></table></figure><p>需要注意的是<br>-</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p>两项要同时为Yes,同步服务才是正常状态.<br>-<br>配置192.168.1.102跟192.168.1.101是完全一样的,只要在配置my.cnf时,将server-id少做修改即可,比如<br>-</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server-id=11</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;例如,我们此时有3台服务器,分别为&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line
      
    
    </summary>
    
      <category term="数据库" scheme="http://www.sealin.net/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="技术" scheme="http://www.sealin.net/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数据库" scheme="http://www.sealin.net/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="http://www.sealin.net/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Redis集群搭建完整攻略</title>
    <link href="http://www.sealin.net/2019/07/02/redis-cluster/"/>
    <id>http://www.sealin.net/2019/07/02/redis-cluster/</id>
    <published>2019-07-02T02:00:34.000Z</published>
    <updated>2019-07-02T02:00:34.550Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Redis安装和配置"><a href="#1-Redis安装和配置" class="headerlink" title="1.Redis安装和配置"></a>1.Redis安装和配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先安装编译环境</span></span><br><span class="line">yum groupinstall <span class="string">"Development tools"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /home/packages</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载redis</span></span><br><span class="line">curl -O http://download.redis.io/releases/redis-5.0.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxf redis-*.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将解压的源码目录放到自己的应用目录</span></span><br><span class="line">mv -f redis-5.0.0 /usr/<span class="built_in">local</span>/redis</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装, 编译问题可以自行搜索</span></span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试是否安装成功, 如果出现版本号说明已经安装成功</span></span><br><span class="line">redis-cli -v</span><br></pre></td></tr></table></figure><h3 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2.修改配置"></a>2.修改配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi redis.conf</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>bind 192.168.1.100<br><br>port 6379<br><br>daemonize yes   # 是否需要以守护进程启动(如果为no, 启动后在前台, ctrl-c退出进程, 可以使用nohub的方式转入后台)<br><br>pidfile /var/run/redis_6379.pid  # 可以自行选择目录, 但是确保已经建立好指定的目录再启动服务, 否则启动报错<br><br>logfile “/var/redis/log/6379.log” # 日志目录, 确保存在否则启动报错<br><br>dir /var/redis/data # 数据存放目录(RDB和AOF共用), 确保存在否则启动报错<br><br>dbfilename 6379.rdb # rdb数据持久化文件<br><br>appendonly yes # 打开aof<br><br>appendfilename “6379.aof” # aof数据持久化文件<br><br>cluster-enabled yes # 集群配置, 开启时单实例机无法执行数据操作(get | set 等)<br><br>cluster-config-file nodes-6379.conf # 自动生成, 保存到上面指定的data目录<br>其他配置保持默认即可.</p></blockquote></blockquote><p>####启动服务推荐使用redis/utils/redis_init_script<br>为启动脚本建立软连接方便使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ln -s <span class="variable">$PWD</span>/utils/redis_init_script /usr/bin/redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个脚本默认读取的配置文件位置为 /etc/redis/$PORT.conf, 所以先在这个建立位置一个redis.conf的软连接,文件名为端口号</span></span><br><span class="line">mkdir /etc/redis</span><br><span class="line">ln -s <span class="variable">$PWD</span>/redis.conf /etc/redis/6379.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用方式如下</span></span><br><span class="line">redis [start | stop]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要查看服务是否已经成功开启, 可根据端口查看或使用客户端连接一次</span></span><br><span class="line">netstat -npl | grep 6379 <span class="comment"># 部分系统版本需要安装net-tools</span></span><br></pre></td></tr></table></figure><p>以上步骤顺利完成后, 就可以开始集群配置了, redis集群至少要求3主3从, 所以至少需要6个单实例服务, 可以通过单机6个配置的方式, 或多个宿主机的方式配置.</p><h3 id="3-集群配置"><a href="#3-集群配置" class="headerlink" title="3.集群配置"></a>3.集群配置</h3><blockquote><p>单机多配置</p><blockquote><p>只需要拷贝多份配置文件和启动脚本, 将这两个文件中的端口对应的值替换为不同的端口<br><br>特别需要注意的是单机配置多个redis时, 时刻记得–&gt;改端口,改端口,改端口&lt;– 不能两个服务重复使用同一个端口</p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mkdir ../redis2</span><br><span class="line"></span><br><span class="line">cp redis.conf ../redis2/</span><br><span class="line"></span><br><span class="line">cp utils/redis_init_script ../redis2</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../redis2</span><br><span class="line"></span><br><span class="line">sed -i s/6379/7379/ redis.conf</span><br><span class="line"></span><br><span class="line">sed -i s/6379/7379 redis_init_script</span><br><span class="line"></span><br><span class="line">ln -s <span class="variable">$PWD</span>/redis.conf /etc/redis/7379.conf</span><br><span class="line"></span><br><span class="line">./redis_init_script start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务是否成功启动, 如果没有出现进程, 查看日志排查问题(一般是指定的文件夹不存在)</span></span><br><span class="line">netstat -npl | grep 7379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如法炮制其他4个吧, 配置好后6个实例都启动起来</span></span><br></pre></td></tr></table></figure><blockquote><p>多机配置<br><br>每个主机上运行一个redis其实没什么好写的,就是步骤1 和 2, 安装完成后开启服务就好了</p></blockquote><h3 id="4-安装ruby环境"><a href="#4-安装ruby环境" class="headerlink" title="4.安装ruby环境"></a>4.安装ruby环境</h3><p>redis对ruby的版本有要求, 目前CentOS7的仓库版本还是很低, 需要到官网下载安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果当前系统已经附带了一个低版本的ruby 需要先卸载</span></span><br><span class="line">yum erase ruby</span><br><span class="line"><span class="comment"># 如果是之前自己使用yum安装的, 完整回滚安装操作(remove或者erase不会卸载依赖型)</span></span><br><span class="line">yum <span class="built_in">history</span> list ruby</span><br><span class="line"><span class="comment"># 结果如下</span></span><br><span class="line"><span class="comment">#    ID | 命令行                   | 日期和时间       | 操作           | 变更数</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#    25 | install ruby -y          | 2018-10-04 16:14 | Install        |    8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到ID后回滚之前的操作</span></span><br><span class="line">yum <span class="built_in">history</span> undo 25</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /home/packages</span><br><span class="line"></span><br><span class="line">curl -O https://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.3.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxf ruby-2.5.3.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ruby-2.5.3</span><br><span class="line"></span><br><span class="line">./configure --<span class="built_in">disable</span>-install-doc <span class="comment"># 我是没安装文档, 如果需要的可以去掉后边的参数</span></span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否已经成功安装ruby</span></span><br><span class="line">ruby -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装gem</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line">curl -O https://rubygems.org/rubygems/rubygems-2.7.7.zip</span><br><span class="line"></span><br><span class="line">unzip rubygems-2.7.7.zip</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> rubygems-2.7.7</span><br><span class="line"></span><br><span class="line">ruby setup.rb</span><br><span class="line"></span><br><span class="line">gem -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为ruby安装redis组件, 这一步可能比较慢</span></span><br><span class="line">gem install redis</span><br></pre></td></tr></table></figure><p>至此, ruby环境也装好了, 可以开始建集群了</p><h3 id="5-创建集群"><a href="#5-创建集群" class="headerlink" title="5. 创建集群"></a>5. 创建集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">redis-trib create --replicas 1 192.168.1.100:6379 192.168.1.100:7379 192.168.1.100:8379 192.168.1.100:9379 192.168.1.100:10379 192.168.1.100:11379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果一切正常, 输出应该是长这样</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Creating cluster</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</span></span><br><span class="line"><span class="comment"># Using 3 masters:</span></span><br><span class="line"><span class="comment"># 192.168.25.110:6379</span></span><br><span class="line"><span class="comment"># 192.168.25.120:6379</span></span><br><span class="line"><span class="comment"># 192.168.25.210:6379</span></span><br><span class="line"><span class="comment"># Adding replica 192.168.25.120:7379 to 192.168.25.110:6379</span></span><br><span class="line"><span class="comment"># Adding replica 192.168.25.110:7379 to 192.168.25.120:6379</span></span><br><span class="line"><span class="comment"># Adding replica 192.168.25.220:6379 to 192.168.25.210:6379</span></span><br><span class="line"><span class="comment"># M: ed9332ea65afb70c615936bb69f3c0081e9ab472 192.168.25.110:6379</span></span><br><span class="line"><span class="comment">#    slots:0-5460 (5461 slots) master</span></span><br><span class="line"><span class="comment"># S: 281dc2be56b2dbe5c726c656b2b4b0017d396394 192.168.25.110:7379</span></span><br><span class="line"><span class="comment">#    replicates acae299367e8f5a742980ac6aa089baf5eb6b5a2</span></span><br><span class="line"><span class="comment"># M: acae299367e8f5a742980ac6aa089baf5eb6b5a2 192.168.25.120:6379</span></span><br><span class="line"><span class="comment">#    slots:5461-10922 (5462 slots) master</span></span><br><span class="line"><span class="comment"># S: caf5a016f022b6f33cd3317ef7dd643ce800131a 192.168.25.120:7379</span></span><br><span class="line"><span class="comment">#    replicates ed9332ea65afb70c615936bb69f3c0081e9ab472</span></span><br><span class="line"><span class="comment"># M: a0c41601d30159940c2bcccce08c3fad2406dfd0 192.168.25.210:6379</span></span><br><span class="line"><span class="comment">#    slots:10923-16383 (5461 slots) master</span></span><br><span class="line"><span class="comment"># S: 387442c1fbdad2a2f2c6f17506c3ebc4c01d55bc 192.168.25.220:6379</span></span><br><span class="line"><span class="comment">#    replicates a0c41601d30159940c2bcccce08c3fad2406dfd0</span></span><br><span class="line"><span class="comment"># Can I set the above configuration? (type 'yes' to accept): yes</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Nodes configuration updated</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Assign a different config epoch to each node</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span></span><br><span class="line"><span class="comment"># Waiting for the cluster to join.....</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Performing Cluster Check (using node 192.168.25.110:6379)</span></span><br><span class="line"><span class="comment"># M: ed9332ea65afb70c615936bb69f3c0081e9ab472 192.168.25.110:6379</span></span><br><span class="line"><span class="comment">#    slots:0-5460 (5461 slots) master</span></span><br><span class="line"><span class="comment">#    1 additional replica(s)</span></span><br><span class="line"><span class="comment"># M: a0c41601d30159940c2bcccce08c3fad2406dfd0 192.168.25.210:6379</span></span><br><span class="line"><span class="comment">#    slots:10923-16383 (5461 slots) master</span></span><br><span class="line"><span class="comment">#    1 additional replica(s)</span></span><br><span class="line"><span class="comment"># M: acae299367e8f5a742980ac6aa089baf5eb6b5a2 192.168.25.120:6379</span></span><br><span class="line"><span class="comment">#    slots:5461-10922 (5462 slots) master</span></span><br><span class="line"><span class="comment">#    1 additional replica(s)</span></span><br><span class="line"><span class="comment"># S: 387442c1fbdad2a2f2c6f17506c3ebc4c01d55bc 192.168.25.220:6379</span></span><br><span class="line"><span class="comment">#    slots: (0 slots) slave</span></span><br><span class="line"><span class="comment">#    replicates a0c41601d30159940c2bcccce08c3fad2406dfd0</span></span><br><span class="line"><span class="comment"># S: 281dc2be56b2dbe5c726c656b2b4b0017d396394 192.168.25.110:7379</span></span><br><span class="line"><span class="comment">#    slots: (0 slots) slave</span></span><br><span class="line"><span class="comment">#    replicates acae299367e8f5a742980ac6aa089baf5eb6b5a2</span></span><br><span class="line"><span class="comment"># S: caf5a016f022b6f33cd3317ef7dd643ce800131a 192.168.25.120:7379</span></span><br><span class="line"><span class="comment">#    slots: (0 slots) slave</span></span><br><span class="line"><span class="comment">#    replicates ed9332ea65afb70c615936bb69f3c0081e9ab472</span></span><br><span class="line"><span class="comment"># [OK] All nodes agree about slots configuration.</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Check for open slots...</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; Check slots coverage...</span></span><br><span class="line"><span class="comment"># [OK] All 16384 slots covered.</span></span><br></pre></td></tr></table></figure><h3 id="6-问题解决"><a href="#6-问题解决" class="headerlink" title="6.问题解决"></a>6.问题解决</h3><pre><code>#### 6.1 问题1</code></pre><blockquote><p>创建集群出现如下错误<br></p><blockquote><p>rubygems/core_ext/kernel_require.rb:59:in `require’: cannot load such file – redis (LoadError)<br></p></blockquote><p>这种还没开始执行创建就已经脚本错误的情况, 一般是没为ruby安装redis组件引起的, 参考 第4步</p></blockquote><pre><code>#### 6.2 问题2</code></pre><blockquote><p>创建集群的时候出现如下错误<br></p><blockquote><p>Can I set the above configuration? (type ‘yes’ to accept): yes<br>   /usr/local/lib/ruby/gems/2.4.0/gems/redis-4.0.2/lib/redis/client.rb:119:in `call’: ERR Slot 0 is already busy (Redis::CommandError)</p></blockquote><p>也就是提示槽xxx繁忙的时候, 将建立集群的每个节点清除数据并重置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@leader1 redis]<span class="comment"># redis-cli -h leader1 6379</span></span><br><span class="line">leader1:6379&gt; flushall</span><br><span class="line">OK</span><br><span class="line">leader1:6379&gt; cluster reset</span><br><span class="line">OK</span><br><span class="line">leader1:6379&gt; quit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 别的节点执行一样的操作</span></span><br></pre></td></tr></table></figure><h3 id="7-使用集群"><a href="#7-使用集群" class="headerlink" title="7.使用集群"></a>7.使用集群</h3><h4 id="使用客户端连接时-添加一个参数-c"><a href="#使用客户端连接时-添加一个参数-c" class="headerlink" title="使用客户端连接时, 添加一个参数 -c"></a>使用客户端连接时, 添加一个参数 -c</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root@leader1 redis2]<span class="comment"># redis-cli -h 192.168.1.100 -p 6379 -c</span></span><br><span class="line"><span class="comment"># 测试集群</span></span><br><span class="line">leader1:6379&gt; <span class="built_in">set</span> name sealin</span><br><span class="line">-&gt; Redirected to slot [5798] located at 192.168.25.120:6379</span><br><span class="line">OK</span><br><span class="line">192.168.25.120:6379&gt;</span><br><span class="line"><span class="comment"># 可以发现操作已经被重定向到了集群中的另一个节点</span></span><br><span class="line"><span class="comment"># 切换一个主机获取数据试试</span></span><br><span class="line">[root@leader1 redis2]<span class="comment"># redis-cli -h follower1 -c</span></span><br><span class="line">follower1:6379&gt; get name</span><br><span class="line">-&gt; Redirected to slot [5798] located at 192.168.25.120:6379</span><br><span class="line"><span class="string">"sealin"</span></span><br><span class="line">192.168.25.120:6379&gt;</span><br><span class="line"><span class="comment"># 同样的转向到了该节点获取数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群信息</span></span><br><span class="line">leader1:6379&gt; cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:6</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_ping_sent:18037</span><br><span class="line">cluster_stats_messages_pong_sent:15989</span><br><span class="line">cluster_stats_messages_fail_sent:4</span><br><span class="line">cluster_stats_messages_sent:34030</span><br><span class="line">cluster_stats_messages_ping_received:15984</span><br><span class="line">cluster_stats_messages_pong_received:15745</span><br><span class="line">cluster_stats_messages_meet_received:5</span><br><span class="line">cluster_stats_messages_fail_received:3</span><br><span class="line">cluster_stats_messages_received:31737</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点信息</span></span><br><span class="line">leader1:6379&gt; cluster nodes</span><br><span class="line">a0c41601d30159940c2bcccce08c3fad2406dfd0 192.168.25.210:6379@16379 master - 0 1539966870000 3 connected 10923-16383</span><br><span class="line">acae299367e8f5a742980ac6aa089baf5eb6b5a2 192.168.25.120:6379@16379 master - 0 1539966869719 2 connected 5461-10922</span><br><span class="line">387442c1fbdad2a2f2c6f17506c3ebc4c01d55bc 192.168.25.220:6379@16379 slave a0c41601d30159940c2bcccce08c3fad2406dfd0 0 1539966871737 4 connected</span><br><span class="line">281dc2be56b2dbe5c726c656b2b4b0017d396394 192.168.25.110:7379@17379 slave acae299367e8f5a742980ac6aa089baf5eb6b5a2 0 1539966868710 5 connected</span><br><span class="line">caf5a016f022b6f33cd3317ef7dd643ce800131a 192.168.25.120:7379@17379 slave ed9332ea65afb70c615936bb69f3c0081e9ab472 0 1539966870729 4 connected</span><br><span class="line">ed9332ea65afb70c615936bb69f3c0081e9ab472 192.168.25.110:6379@16379 myself,master - 0 1539966863000 1 connected 0-5460</span><br></pre></td></tr></table></figure><p>整个搭建流程到此结束了, 祝君好运.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-Redis安装和配置&quot;&gt;&lt;a href=&quot;#1-Redis安装和配置&quot; class=&quot;headerlink&quot; title=&quot;1.Redis安装和配置&quot;&gt;&lt;/a&gt;1.Redis安装和配置&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;t
      
    
    </summary>
    
      <category term="技术" scheme="http://www.sealin.net/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="缓存" scheme="http://www.sealin.net/categories/%E6%8A%80%E6%9C%AF/%E7%BC%93%E5%AD%98/"/>
    
    
      <category term="Redis" scheme="http://www.sealin.net/tags/Redis/"/>
    
      <category term="缓存" scheme="http://www.sealin.net/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="基础服务" scheme="http://www.sealin.net/tags/%E5%9F%BA%E7%A1%80%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
</feed>
